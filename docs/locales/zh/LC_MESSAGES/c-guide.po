# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Chao Wang
# This file is distributed under the same license as the bitproto package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bitproto 0.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-02 22:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../c-guide.rst:4 86e8d7e796ef44d7aa04479ad9cea97d
msgid "C Guide"
msgstr "C 语言引导"

#: ../../c-guide.rst:6 73210254258b44c6adff30c2a1277fd5
msgid "This document will introduce how to use bitproto with C language."
msgstr "本文将介绍如何在 C 语言中使用 bitproto 。"

#: ../../c-guide.rst:9 eb2ae16941c24d40a38dda0fa1acc636
msgid "Compile bitproto for C"
msgstr "编译 bitproto 生成 C 文件"

#: ../../c-guide.rst:11 98deeb50d3764ef4b6bcfb47ddc303ee
msgid "Firstly, run the bitproto compiler to generate code for C:"
msgstr "首先，我们执行 bitproto 的编译器来生成 C 语言的代码:"

#: ../../c-guide.rst:17 cb004452ecfe4be18d2b2dc9ce0f29b8
msgid ""
"Where the ``pen.bitproto`` is introduced in earlier section :ref"
":`quickstart-example-bitproto`."
msgstr "其中， ``pen.bitproto`` 已经在前面的章节 "
":ref:`quickstart-example-bitproto` 中做过说明。"

#: ../../c-guide.rst:19 6c904a49029b4a62b3cd08e9e9e65224
msgid "We will find that bitproto generates us two files in current directory:"
msgstr "我们会发现 bitproto 会为我们生成两个文件:"

#: ../../c-guide.rst:21 411a8b20024e4e69992acf2af4bcbe9f
msgid ""
"``pen_bp.h``: Contains the declarations of structs, macros and api "
"functions etc."
msgstr "``pen_bp.h`` : 这个头文件包含了结构体、宏和接口函数的声明。"

#: ../../c-guide.rst:22 77872d7a23234e758b6d50ba8e55fa50
msgid "``pen_bp.c``: Contains the function implementations."
msgstr "``pen_bp.c`` : 这个文件包含了函数的实现。"

#: ../../c-guide.rst:24 23ee0c51808e4813b82a2d4a23f727b3
msgid ""
"It's recommended to open this two generated files to have a look. In the "
"generated file ``pen_bp.h``:"
msgstr "我们推荐你使用编辑器打开生成的两个文件，查看一下生成的文件的样子。在生成的 ``pen_bp.h`` 文件中:"

#: ../../c-guide.rst:26 7bcdb3d8a7d14fe6bd761854f389d494
msgid ""
"The ``enum Color`` in bitproto is mapped to a ``typedef`` statement in C,"
" and the enum values are mapped to macros:"
msgstr "bitproto 中的 ``enum Color`` 被映射成了一个 C 语言中的 ``typedef`` 语句，"
"枚举的值被映射成了宏语句："

#: ../../c-guide.rst:38 9282166e030a49078e1012a4c72b7f77
msgid "The ``Timestamp`` type in bitproto is mapped to a ``typedef`` in C:"
msgstr "bitproto 中的 ``Timestamp`` 类型被映射成了一个 C 语言中的 ``typedef`` 语句："

#: ../../c-guide.rst:44 7942d61df5f04464bede6cbeeae91b2e
msgid "The message ``Pen`` in bitproto is mapped to a ``struct`` in C:"
msgstr "bitproto 中的消息 ``Pen`` 被映射成了一个 C 语言中的 ``struct`` 结构体："

#: ../../c-guide.rst:53 b92d3ca355814b55a28ce90114c784fa
msgid ""
"The compiler also generates three functions, they are the encoder, "
"decoder and json formatter."
msgstr "bitproto 的编译器同样会生成 3 个函数，分别是 编码函数、解码函数 和 JSON 格式化函数："

#: ../../c-guide.rst:67 b4de0c11ec4c47538446ed8c8ab50380
msgid "Download bitproto C library"
msgstr "下载 bitproto 的 C 语言支持库"

#: ../../c-guide.rst:69 a0da8ac490974ec0ba6eab74c0c7dc3e
msgid ""
"Bitproto serialization requires a language-specific library to work, the "
"generated encoder and decoder depends on the bitproto C library "
"underlying."
msgstr "bitproto 的序列化需要依赖目标语言的支持库来工作，在这里，"
"我们生成的编解码函数依赖 bitproto 的 C 语言支持库。"

#: ../../c-guide.rst:72 7ea951cec6654fbabb61c634be557bc9
msgid ""
"Download the bitproto library for C language from `this github link "
"<https://github.com/hit9/bitproto/tree/master/lib/c>`_, and put them (the"
" ``bitproto.c`` and ``bitproto.h``) to current working directory."
msgstr "可以从 `Github 的这个链接 <https://github.com/hit9/bitproto/tree/master/lib/c>`_ 来下载 bitproto 对 C 语言的支持库。"
"下载后，把文件 ``bitproto.c`` 和 ``bitproto.h`` 放在当前目录下。"

#: ../../c-guide.rst:77 31f9ba01ed174ddb8e5998290fe9c1cb
msgid "Run the code"
msgstr "运行代码"

#: ../../c-guide.rst:79 9631afe58bf249aaa62f535de4bd4ef1
msgid "Now, we create a file named ``main.c`` and put the following code in it:"
msgstr "现在，我们创建一个叫做 ``main.c`` 的文件，包含以下代码"

#: ../../c-guide.rst:105 f9df87124ad64f82a01aa2085b3b3955
msgid ""
"In the code above, we firstly create a ``p`` of type ``struct Pen`` with "
"data initilization, then call a function ``EncodePen`` to encode ``p`` "
"into buffer ``s``. The length of buffer ``s`` is generated by compiler as"
" a macro defined as ``BYTES_LENGTH_PEN``."
msgstr "上面的代码中，首先创建了一个 ``struct Pen`` 类型的实例 ``p`` ，并做了数据上的初始化。"
"然后执行了一个函数 ``EncodePen`` 来编码 ``p`` 到字节流 ``s`` 。其中，字节流 ``s`` 的长度是编译器生成的宏 ``BYTES_LENGTH_PEN`` 。"

#: ../../c-guide.rst:109 39ad65070a7c42f9b165ce2bf72aecd0
msgid ""
"In the decoding part, we construct another ``p1`` instance of type "
"``struct Pen`` with zero initilization, then call a function "
"``DecodePen`` to decode bytes from buffer ``s`` into ``p1``."
msgstr "在解码的部分，首先创建了 ``struct Pen`` 的另一个实例 ``p1`` ，然后执行函数 ``DecodePen`` 来从字节流 ``s`` 中解码数据到 ``p1`` 中。"

#: ../../c-guide.rst:112 8a6e600e96a84228bc7f84d4a6393e5f
msgid ""
"Finally, use a function ``JsonPen`` generated by the compiler to format "
"the structure ``p1`` to json string to checkout if the decoding works ok."
msgstr "最后，使用了函数 ``JsonPen`` 来把 ``p1`` 格式化成为一个 JSON 字符串，打印来检验我们的编解码是否正常工作。"

#: ../../c-guide.rst:115 aa1cf3cf1ee64531adabc544775097b7
msgid ""
"Let's compile it with the C library ``bitproto.c`` and generated "
"``pen_bp.c``, and run:"
msgstr "现在我们来带入 ``bitproto.c`` 和生成的 ``pen_bp.c`` 一起和 ``main.c`` 进行编译，然后执行 ："

#: ../../c-guide.rst:123 182466eb2eba4d7f9b99f17f97c79767
msgid ""
"The encoder and decoder copy bits between the structure's memory and "
"buffer ``s`` byte-to-byte, the whole call allocates memory on the stack "
"without any dynamic allocations."
msgstr "编码和解码函数会一个字节一个字节的在结构体和字节流之间拷贝比特数据，"
"整个调用都是在栈上申请内存，没有任何动态内存分配。"

#: ../../c-guide.rst:126 0a953538d2f745589d661f9926582a40
msgid ""
"There's another larger example source code on `the github "
"<https://github.com/hit9/bitproto/tree/master/example>`_."
msgstr "在 `github <https://github.com/hit9/bitproto/tree/master/example>`_ 上有一个更大一些的例子。"

#: ../../c-guide.rst:129 9ada6b32acb9487bbdb26e1be6bcae0c
msgid "Naming Prefix"
msgstr "命名前缀"

#: ../../c-guide.rst:131 da878e68dcb14fc9bed2deae15748dab
msgid ""
"As we know, there's no namespace mechanism to scope definition names "
"across including header files in C. Bitproto provides an option to add a "
"name prefix to all generated types. To use it, define an ``option`` at "
"the global scope of the bitproto file:"
msgstr "我们都知道，在 C 语言中没有一种命名空间的机制来。"
"bitproto 提供了一个支持命名前缀的选项，这样可以添加一个命名前缀到所有生成类型的名字上。"
"用法是这样的，在 bitproto 的文件中，全局维度定义一个选项:"

#: ../../c-guide.rst:139 002b2e7c1f914ea9a4cc86749fdb5e30
msgid ""
"Run the bitproto compiler again, we will that names in ``pen_bp.h`` are "
"changed:"
msgstr "再次执行 bitproto 的编译器，我们可以看到 ``pen_bp.h`` 中的名字全部变了："

#: ../../c-guide.rst:141 58dda3162bc9497aa77901b86e97bc9a
msgid "The ``enum Color`` is now mapped to ``MyPrefixColor``."
msgstr "``enum Color`` 现在映射成了 ``MyPrefixColor`` 。"

#: ../../c-guide.rst:142 802f277e2c48493f89e16b61661bf947
msgid "The ``Timestamp`` is now mapped to ``MyPrefixTimestamp``."
msgstr "``Timestamp`` 现在映射成了 ``MyPrefixTimestamp`` 。"

#: ../../c-guide.rst:143 a6e45213ff4645879cf0b15a14761ff0
msgid "The ``message Pen`` is now mapped to ``struct MyPrefixPen``."
msgstr "``message Pen`` 现在映射成了 ``struct MyPrefixPen`` 。"
