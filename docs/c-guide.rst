.. _quickstart-c-guide:

C Guide
=======

This document will introduce how to use bitproto with C language.

Firstly, run the bitproto compiler to generate code for C:

.. sourcecode:: bash

   $ bitproto c pen.bitproto

Where the `pen.bitproto` is introduced in earlier section :ref:`quickstart-example-bitproto`.

We will find that bitproto generates us two files in current directory:

- `pen_bp.h`: Contains the declarations of structs, macros and api functions etc.
- `pen_bp.c`: Contains the function implementations.

Download the bitproto library for C language from
`this github link <https://github.com/hit9/bitproto/tree/master/lib/c>`_,
and put them (the `bitproto.c` and `bitproto.h`) to current working directory.

Now, we create a file named ``main.c`` and put the following code in it:

.. sourcecode:: c

   #include "pen_bp.h"
   #include <stdio.h>

   int main() {
     struct Pen p = {.color = COLOR_RED, .produced_at = 1611515729966};
     unsigned char s[BYTES_LENGTH_PEN] = {0};

     // Encode p to buffer s.
     EncodePen(&p, s);

     // Decode buffer s to p1.
     struct Pen p1 = {};
     DecodePen(&p1, s);

     // Format p1 to buffer buf.
     char buf[64] = {0};
     JsonPen(&p1, buf);
     printf("%s", buf);

     return 0;
   }

Let's compile and run:

.. sourcecode:: bash

   $ cc *.c -o main
   $ ./main
   {"color":1,"produced_at":1611515729966}

In this example:

* ``EncodePen`` is the encoding function generated by bitproto, it takes
  the address of a struct (the message) and a target bytes buffer,
  encodes the data of the message into the buffer.
* ``DecodePen`` is the decoding function generated by bitproto, it takes
  the address of target struct (the message) and a source bytes buffer,
  decodes the buffer to the target message.
* ``JsonPen`` is a json formatter function generated by bitproto, it formats
  the given struct to a large-enough buffer, designed for debugging purpose.
