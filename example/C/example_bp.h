// Code generated by bitproto. DO NOT EDIT.

// Proto drone describes the structure of the drone.

#ifndef __BITPROTO__DRONE_H__
#define __BITPROTO__DRONE_H__ 1

#include <inttypes.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

typedef int64_t Timestamp;

typedef int32_t TernaryInt32[3];

typedef uint8_t DroneStatus;

#define DRONE_STATUS_UNKNOWN 0
#define DRONE_STATUS_STANDBY 1
#define DRONE_STATUS_RISING 2
#define DRONE_STATUS_LANDING 3
#define DRONE_STATUS_FLYING 4

typedef uint8_t PropellerStatus;

#define PROPELLER_STATUS_UNKNOWN 0
#define PROPELLER_STATUS_IDLE 1
#define PROPELLER_STATUS_ROTATING 2

typedef uint8_t RotatingDirection;

#define ROTATING_DIRECTION_UNKNOWN 0
#define ROTATING_DIRECTION_CLOCK_WISE 1
#define ROTATING_DIRECTION_ANTI_CLOCK_WISE 2

typedef uint8_t PowerStatus;

#define POWER_STATUS_UNKNOWN 0
#define POWER_STATUS_OFF 1
#define POWER_STATUS_ON 2

typedef uint8_t LandingGearStatus;

#define LANDING_GEAR_STATUS_UNKNOWN 0
#define LANDING_GEAR_STATUS_UNFOLDED 1
#define LANDING_GEAR_STATUS_FOLDED 2

// Number of bytes to encode struct Propeller
#define BYTES_LENGTH_PROPELLER 2

struct Propeller {
    uint8_t id;
    PropellerStatus status;
    RotatingDirection direction;
};

// Number of bytes to encode struct Power
#define BYTES_LENGTH_POWER 2

struct Power {
    uint8_t battery;
    PowerStatus status;
    bool is_charging;
};

// Number of bytes to encode struct Network
#define BYTES_LENGTH_NETWORK 9

struct Network {
    // Degree of signal, between 1~10.
    uint8_t signal;
    // The timestamp of the last time received heartbeat packet.
    Timestamp heartbeat_at;
};

// Number of bytes to encode struct LandingGear
#define BYTES_LENGTH_LANDING_GEAR 1

struct LandingGear {
    LandingGearStatus status;
};

// Number of bytes to encode struct Position
#define BYTES_LENGTH_POSITION 12

struct Position {
    uint32_t latitude;
    uint32_t longitude;
    uint32_t altitude;
};

// Number of bytes to encode struct Pose
#define BYTES_LENGTH_POSE 12

// Pose in flight. https://en.wikipedia.org/wiki/Aircraft_principal_axes
struct Pose {
    int32_t yaw;
    int32_t pitch;
    int32_t roll;
};

// Number of bytes to encode struct Flight
#define BYTES_LENGTH_FLIGHT 36

struct Flight {
    struct Pose pose;
    // Velocity at X, Y, Z axis.
    TernaryInt32 velocity;
    // Acceleration at X, Y, Z axis.
    TernaryInt32 acceleration;
};

// Number of bytes to encode struct Drone
#define BYTES_LENGTH_DRONE 65

struct Drone {
    DroneStatus status;
    struct Position position;
    struct Flight flight;
    struct Propeller propellers[4];
    struct Power power;
    struct Network network;
    struct LandingGear landing_gear;
};

// Encode struct Propeller to given buffer s.
int EncodePropeller(struct Propeller *m, unsigned char *s);
// Decode struct Propeller from given buffer s.
int DecodePropeller(struct Propeller *m, unsigned char *s);
// Format struct Propeller to a json format string.
int JsonPropeller(struct Propeller *m, char *s);

// Encode struct Power to given buffer s.
int EncodePower(struct Power *m, unsigned char *s);
// Decode struct Power from given buffer s.
int DecodePower(struct Power *m, unsigned char *s);
// Format struct Power to a json format string.
int JsonPower(struct Power *m, char *s);

// Encode struct Network to given buffer s.
int EncodeNetwork(struct Network *m, unsigned char *s);
// Decode struct Network from given buffer s.
int DecodeNetwork(struct Network *m, unsigned char *s);
// Format struct Network to a json format string.
int JsonNetwork(struct Network *m, char *s);

// Encode struct LandingGear to given buffer s.
int EncodeLandingGear(struct LandingGear *m, unsigned char *s);
// Decode struct LandingGear from given buffer s.
int DecodeLandingGear(struct LandingGear *m, unsigned char *s);
// Format struct LandingGear to a json format string.
int JsonLandingGear(struct LandingGear *m, char *s);

// Encode struct Position to given buffer s.
int EncodePosition(struct Position *m, unsigned char *s);
// Decode struct Position from given buffer s.
int DecodePosition(struct Position *m, unsigned char *s);
// Format struct Position to a json format string.
int JsonPosition(struct Position *m, char *s);

// Encode struct Pose to given buffer s.
int EncodePose(struct Pose *m, unsigned char *s);
// Decode struct Pose from given buffer s.
int DecodePose(struct Pose *m, unsigned char *s);
// Format struct Pose to a json format string.
int JsonPose(struct Pose *m, char *s);

// Encode struct Flight to given buffer s.
int EncodeFlight(struct Flight *m, unsigned char *s);
// Decode struct Flight from given buffer s.
int DecodeFlight(struct Flight *m, unsigned char *s);
// Format struct Flight to a json format string.
int JsonFlight(struct Flight *m, char *s);

// Encode struct Drone to given buffer s.
int EncodeDrone(struct Drone *m, unsigned char *s);
// Decode struct Drone from given buffer s.
int DecodeDrone(struct Drone *m, unsigned char *s);
// Format struct Drone to a json format string.
int JsonDrone(struct Drone *m, char *s);

void BpXXXProcessTimestamp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatTimestamp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessTernaryInt32(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatTernaryInt32(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessDroneStatus(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatDroneStatus(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPropellerStatus(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPropellerStatus(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessRotatingDirection(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatRotatingDirection(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPowerStatus(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPowerStatus(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessLandingGearStatus(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatLandingGearStatus(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPropeller(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPropeller(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPower(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPower(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessNetwork(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatNetwork(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessLandingGear(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatLandingGear(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPosition(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPosition(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPose(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPose(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessFlight(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatFlight(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessDrone(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatDrone(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif